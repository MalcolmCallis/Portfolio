<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>color_wheel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
hue_shades = global.hue_shade_count;
circumference = 5 * hue_shades;
diameter = circumference / pi;
radius = diameter / 2.0;


//view_xview[1] = x-sprite_width
//view_yview[1] = y-sprite_width
//view_h
//view_object[1]=self;//set object to follow
//view_wview[1] = diameter;
//view_hview[1] = diameter;
//view_wport[1] = diameter;
//view_hport[1] = diameter;
//view_hborder[1] = radius;/
//view_vborder[1] = radius;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//draw background
for(var shade = 0; shade &lt; hue_shades; shade++){
    var color = make_colour_hsv(shade,hue_shades - 1, hue_shades - 1);
    draw_set_color(color);
    
    var first_point = calculate_x_y_coord(shade,hue_shades,radius)
    
    var second_point = calculate_x_y_coord(shade + 1, hue_shades,radius)
    
    draw_triangle(x,y,x + first_point[0],y + first_point[1],x + second_point[0],y + second_point[1],false)
}


var point_width = 3.0
var max_generations_shown = sprite_width / 2.0 / point_width; 
var generations_obscured = longest_generation - max_generations_shown;


for(var i = 0; i &lt; ds_list_size(draw_queue);i++){
    var draw_this = ds_list_find_value(draw_queue,i);
    var hue = draw_this[0];
    var generation = draw_this[1];
    var color = make_colour_hsv(hue,hue_shades - 1, hue_shades - 1);
    
    var point_radius;
    point_radius = radius + ((generation - longest_generation) * point_width);
    if(point_radius &lt; 0){
        continue;//don't draw this point
    }

    
    var coords = calculate_x_y_coord(hue,hue_shades,point_radius)
    draw_sprite(target,0,x + coords[0],y + coords[1])
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
