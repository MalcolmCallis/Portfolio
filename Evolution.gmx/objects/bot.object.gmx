<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>creature</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>body_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>birth_place[0] = x
birth_place[1] = y
ds_list_add(control.new_births,birth_place)

alarm[1] = 5 * global.minutes - irandom(global.minutes);//die of old age after 5 minutes

if(!variable_instance_exists(self,"hue")){
    hue = floor(random(12)) * global.hue_shade_count / 12;
}

image_blend = make_color_hsv(hue,global.hue_shade_count - 1,global.hue_shade_count - 1)

if(!variable_instance_exists(self,"generation")){
    generation = 1
}

if(!variable_instance_exists(self,"first_chromosome")){
    first_chromosome = instance_create(0,0,chromosome)
}


if(!variable_instance_exists(self,"second_chromosome")){
    second_chromosome = instance_create(0,0,chromosome)
}

speed = movement_speed

female = random(2) &lt; 1

baby_bot_size = calculate_expressed_gene_for_baby_size(first_chromosome.baby_bot_size,first_chromosome.baby_bot_size_genetic_dominance,second_chromosome.baby_bot_size,second_chromosome.baby_bot_size_genetic_dominance)

first_layer_synapses = calculate_expressed_genes_for_layer(first_chromosome.first_layer_synapses,first_chromosome.first_layer_genetic_dominance_array ,second_chromosome.first_layer_synapses,second_chromosome.first_layer_genetic_dominance_array )

second_layer_synapses = calculate_expressed_genes_for_layer(first_chromosome.second_layer_synapses,first_chromosome.second_layer_genetic_dominance_array,second_chromosome.second_layer_synapses,second_chromosome.second_layer_genetic_dominance_array)

output_layer_synapses = calculate_expressed_genes_for_layer(first_chromosome.output_layer_synapses,first_chromosome.output_layer_genetic_dominance_array,second_chromosome.output_layer_synapses,second_chromosome.output_layer_genetic_dominance_array)

input_layer_neurons[global.input_neuron_count - 1] = 0

first_layer_neurons[global.input_neuron_count - 1] = 0

second_layer_neurons[global.input_neuron_count - 1] = 0

output_layer_neurons[global.output_neuron_count - 1] = 0




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
for(var i = 0; i &lt; ds_list_size(unborn_children);i++){

    var unborn_child = ds_list_find_value(unborn_children,i)
    instance_destroy(unborn_child.first_chromosome,true)
    //instance_destroy(unborn_child.second_chromosome,true)
    instance_destroy(unborn_child,true)
}

if(global.difficulty &gt; 0 &amp;&amp; global.bot_count &lt;= global.min_bots){
    //respawn to prevent population dropping below minimum
        
            with(instance_create(random(room_width),random(room_height),parameters)){
                other.baby = self
                self.species = other.species
                self.first_chromosome = other.first_chromosome
                //self.second_chromosome = other.second_chromosome
                self.size = other.baby_bot_size;
                self.hue = other.hue
                self.generation = other.generation
                instance_change(bot,true)
            }
            
} else {

instance_destroy(first_chromosome,true)
//instance_destroy(second_chromosome,true)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>give_birth(self,true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


var max_babies_asexually = global.max_babies_created_asexually;

if(!pregnant){
    var number_of_babies_to_have = min(max_babies_asexually,floor(self.size / self.baby_bot_size - 1.0))  
    reproduce_asexually(number_of_babies_to_have,true)
}
instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> 

candidate_actions = find_candidate_actions()

action = get_highest_priority_action(candidate_actions)

ds_list_destroy(candidate_actions)

move_direction = action[1];
sprint = action[2] &gt; 0

direction += move_direction
image_angle = direction
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="bot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(calculate_can_mate(self,other) &amp;&amp; !pregnant){
    var number_of_babies_to_have = min(global.max_babies_per_litter,floor(self.size / self.baby_bot_size - 1.0))  
    var asexually = false;
    var mom = self;
    var dad = other;
    reproduce(mom,dad,asexually,number_of_babies_to_have)
    alarm[2] = 10 * room_speed;
}

if(calculate_can_eat(self,other)){
    size += other.size
    instance_destroy(other)
    var low_population = global.bot_count &lt; (global.min_bots + global.max_bots) / 2.0; 

    if(global.bot_count &lt;= global.max_bots &amp;&amp; low_population){
        var number_of_babies_to_have = min(1,floor(self.size / self.baby_bot_size - 1.0))  
        reproduce_asexually(number_of_babies_to_have,false)
    } 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="body_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
